

@{

    ViewData["Title"] = "Register";
    var orgs = ViewBag.Organizations as EmpathyKick.Models.Organization[];
}

<h1>@ViewData["Title"]</h1>

 @model EmpathyKick.Models.User

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

        <h4>User Account</h4>
        <hr />
        @Html.ValidationSummary(true)
        @if (ViewBag.Message != null)
        {

            <div class="form-group">
                <div class="col-md-10" id="ViewBagData">@ViewBag.Message</div>
            </div>
        }

    <div class="form-horizontal">
        <div class="container">
            <div class="row">

                <div class="col-md-6">
        <div class="form-group">
            @Html.LabelFor(model => model.Username, new { @class = "control-label col-md-2" })
            <div class="col-lg-6">
                @Html.EditorFor(model => model.Username, new { @required = "required" })
                @Html.ValidationMessageFor(model => model.Username)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Password, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Password, new { @required = "required" })
                @Html.ValidationMessageFor(model => model.Password)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { @required = "required" })
                @Html.ValidationMessageFor(model => model.FirstName)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { @required = "required" })
                @Html.ValidationMessageFor(model => model.LastName)
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Phone, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Phone, new { @required = "required" })
                @Html.ValidationMessageFor(model => model.Phone)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { @required = "required" })
                @Html.ValidationMessageFor(model => model.Email)
            </div>
        </div>
        </div>
        
        
        <div class="col-md-6">
        <div class="form-group">
            @Html.LabelFor(model => model.Address.Address, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address.Address, new { @required = "required" })
                @Html.ValidationMessageFor(model => model.Address.Address)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address.City, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address.City, new { @required = "required" })
                @Html.ValidationMessageFor(model => model.Address.City)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address.Region, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address.Region, new { @required = "required" })
                @Html.ValidationMessageFor(model => model.Address.Region)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address.Country, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address.Country, new { @required = "required" })
                @Html.ValidationMessageFor(model => model.Address.Country)
            </div>
        </div>
       </div>
        </div>
      
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <div class="col-md-6">
                    <input type="checkbox" name="isAdmin" />
                    <label>Empathy Admin</label>
                    <br />
                        <input type="checkbox" id="myCheckbox"> Organization Admin
                    </div>
                    <!-- The Modal -->
                    <div class="modal" id="myModal">
                        <div class="modal-dialog">
                            <div class="modal-content">

                                <!-- Modal Header -->
                                <div class="modal-header">
                                    <h4 class="modal-title">Choose an Organization</h4>
                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                </div>

                                <!-- Modal Body -->
                                <div class="modal-body">
                                    @for(int i=0;i< orgs.Length;i++)
                                    {
                                        <input type="checkbox" id="@orgs[i].OrganizationId">
                                        <label>@orgs[i].OrganizationName</label>
                                        <br />
                                    }
                                </div>

                                <!-- Modal Footer -->
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                                </div>

                            </div>
                        </div>
                    </div>
                    <input type="hidden" id="checkboxState" name="checkboxState" />
                <div class="col-md-6">
                    <input type="submit" value="Register" class="btn btn-primary" id="submitBtn" disabled />
                </div>
            </div>
        </div>
        </div>
    </div>
    <style>
        #submitBtn:disabled {
            background-color: #dddddd; /* Change this to the desired grey color */
        }

        #ViewBagData {
            color: red;
            font-weight: bold;
            background-color: yellow;
            padding: 10px;
            margin: 10px;
            border: 2px solid red;
            box-shadow: 2px 2px 5px grey; /* Adjust as needed */
        }

    </style>
}



@section Scripts {
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

    <script>
        $(document).ready(function () {
            var handleCheckboxChange = true; // Flag to enable/disable checkbox change event
            var checkboxState = {};
            // Attach change event to the checkbox
            $("#myCheckbox").change(function () {
                // Check if the change event should be handled
                if (handleCheckboxChange) {
                    // If the checkbox is checked, open the modal
                    if ($(this).is(":checked")) {
                        $("#myModal").modal("show");
                    } else {
                        // If the checkbox is unchecked, close the modal
                        $("#myModal").modal("hide");
                    }
                }
            });
            $("#myModal").on('click', '[data-dismiss="modal"]', function () {
                // Disable checkbox change event handling
                handleCheckboxChange = false;

                // Manually hide the modal
                $("#myModal").modal("hide");
                saveCheckboxState();
            });
            var message = @Html.Raw(Json.Serialize(ViewBag.Message));
            if (message == null) {
                // Trigger form submission to initiate validation
                $('form').submit();
            } else {
                $('#submitBtn').prop('disabled', true);
            }
                // Enable/disable submit button based on form validity
                updateSubmitButtonState();
          

            $('form').change(function () {
                updateSubmitButtonState();
            });

            function updateSubmitButtonState() {
                var isValid = true;
                var emailErrorSpan = document.getElementById('Email-error');
                var emailBad = false;

                // Check if the element exists
                if (emailErrorSpan !== null) {
                    // The span element with id 'Email-error' exists
                    console.log('The span element exists.');
                    emailBad = true;
                    console.log(emailBad);
                } else {
                    // The span element with id 'Email-error' does not exist
                    console.log('The span element does not exist.');
                    console.log(emailBad);
                }

                $('form input').each(function () {
                    if ($(this).attr('type') === 'checkbox' || $(this).attr('type') === 'hidden') {
                        return true; // Continue the loop for checkboxes
                    }
                    if ($(this).val() === '') {
                        isValid = false;
                        return false; // break out of the each loop
                    } else if (emailBad) {
                        isValid = false;
                        return false;
                    }
                });

                $('#submitBtn').prop('disabled', !isValid);
            }

            $("#myModal input[type='checkbox']").change(function () {
                // Update the state of the checkbox
                var checkboxId = $(this).attr("id");
                console.log(checkboxId);
                checkboxState[checkboxId] = $(this).is(":checked");
            });

            // Function to save the state of each checkbox
            function saveCheckboxState() {
                $("#checkboxState").val(JSON.stringify(checkboxState))
                console.log("Checkbox state:", checkboxState);

                // You can now use 'checkboxState' to determine which checkboxes were checked
            }

        });
    </script>
}


